{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2733,"status":"ok","timestamp":1672116095937,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"},"user_tz":-540},"id":"EX7ZGe1C0BtI","outputId":"c292125e-c783-4004-d0b6-7001bfc93a27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","source":["# pip install imblearn\n","from imblearn.over_sampling import BorderlineSMOTE"],"metadata":{"id":"D7UioR5Qse7a","executionInfo":{"status":"ok","timestamp":1672116098014,"user_tz":-540,"elapsed":832,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1672116099148,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"},"user_tz":-540},"id":"E76cZwhP0Fl6","outputId":"9daf5e3a-7160-4f46-ce87-94c9e48ae219"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/csi_code/cnn\n"]}],"source":["cd /content/drive/MyDrive/csi_code/cnn"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"QKwZGki81BMl","executionInfo":{"status":"ok","timestamp":1672116107785,"user_tz":-540,"elapsed":8638,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[],"source":["from __future__ import print_function\n","import sklearn as sk\n","from sklearn.metrics import confusion_matrix\n","import matplotlib\n","\n","matplotlib.use(\"Agg\")\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import numpy as np\n","import sys\n","from sklearn.model_selection import KFold, cross_val_score\n","import csv\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","import os\n","os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n","# from utils import readCsiAmp_PCA\n","from fix_cross_vali_input_data import csv_import, DataSet"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"s60EBTFT0kUa","executionInfo":{"status":"ok","timestamp":1672116107785,"user_tz":-540,"elapsed":4,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[],"source":["keras = tf.keras\n","\n","learning_rate = 0.0001  # 학습의 속도에 영향. 너무 크면 학습이 overshooting해서 학습에 실패하고, 너무 작으면 더디게 진행하다가 학습이 끝나 버린다.\n","training_iters = 2000\n","batch_size = 16\n","display_step = 100\n","\n","# Network Parameters\n","window_size = 500\n","threshold = 60\n","\n","n_input = 90  # WiFi activity data input (img shape: 90*window_size)\n","n_steps = window_size  # timesteps\n","n_hidden = 200  # hidden layer num of features original 200\n","n_classes = 6  # WiFi activity total classes\n","\n","# Output folder\n","OUTPUT_FOLDER_PATTERN = \"LR{0}_BATCHSIZE{1}_NHIDDEN{2}/\"\n","output_folder = OUTPUT_FOLDER_PATTERN.format(learning_rate, batch_size, n_hidden)\n","if not os.path.exists(output_folder):\n","    os.makedirs(output_folder)\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"iLAcYVHK01f9","executionInfo":{"status":"ok","timestamp":1672116107785,"user_tz":-540,"elapsed":3,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[],"source":["leaky_relu = tf.nn.leaky_relu\n","\n","def CNN(\n","        input_shape=None,\n","        classes = 6):\n","    model = tf.keras.Sequential([\n","        # 특징 추출 부분\n","        # Conv 1\n","        tf.keras.layers.Conv2D(filters=4,\n","                               kernel_size=(5, 5),\n","                               strides=3,\n","                               padding=\"valid\",\n","                               activation=tf.keras.activations.relu,\n","                               input_shape=input_shape),\n","        # Max Pool 1\n","        tf.keras.layers.MaxPool2D(pool_size=(3, 3),\n","                                  strides=(2, 2),\n","                                  padding=\"valid\"),\n","        tf.keras.layers.BatchNormalization(),\n","\n","        # Conv 1\n","        tf.keras.layers.Conv2D(filters=16,\n","                               kernel_size=(3, 3),\n","                               strides=2,\n","                               padding=\"same\",\n","                               activation=tf.keras.activations.relu,\n","                               input_shape=input_shape),\n","        # Max Pool 1\n","        tf.keras.layers.MaxPool2D(pool_size=(3, 3),\n","                                  strides=(2, 3),\n","                                  padding=\"valid\"),\n","        tf.keras.layers.BatchNormalization(),\n","\n","        # Conv 2\n","        tf.keras.layers.Conv2D(filters=8,\n","                               kernel_size=(3, 3),\n","                               strides=2,\n","                               padding=\"same\",  # 크기 유지, 즉 여기서는 2임\n","                               activation=tf.keras.activations.relu),\n","        # Max Pool 2\n","        tf.keras.layers.MaxPool2D(pool_size=(3, 5),\n","                                  strides=(2, 3),\n","                                  padding=\"same\"),\n","        tf.keras.layers.BatchNormalization(),\n","\n","        tf.keras.layers.Flatten(),\n","\n","        # 분류 층 부분\n","        # Fully connected layer 1\n","        tf.keras.layers.Dense(units=64,\n","                              activation=tf.keras.activations.relu),\n","        # tf.keras.layers.BatchNormalization(),\n","        tf.keras.layers.Dropout(rate=0.2),\n","        # Fully connected layer 2\n","        tf.keras.layers.Dense(units=32,\n","                              activation=tf.keras.activations.relu),\n","        # tf.keras.layers.BatchNormalization(),\n","        tf.keras.layers.Dropout(rate=0.2),\n","\n","        tf.keras.layers.Dense(units=32,\n","                              activation=tf.keras.activations.relu, name=\"my_intermediate_layer\"),\n","        # tf.keras.layers.BatchNormalization(),\n","        tf.keras.layers.Dropout(rate=0.2),\n","\n","        # Fully connected layer 3\n","        tf.keras.layers.Dense(units=classes,\n","                              activation=tf.keras.activations.softmax)\n","    ])\n","\n","    return model"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"08GH0Abg18to","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1672116109001,"user_tz":-540,"elapsed":1219,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"fa17312e-36cb-4698-c3c5-1b2fe906b993"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 166, 29, 4)        104       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 82, 14, 4)        0         \n"," )                                                               \n","                                                                 \n"," batch_normalization (BatchN  (None, 82, 14, 4)        16        \n"," ormalization)                                                   \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 41, 7, 16)         592       \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 20, 2, 16)        0         \n"," 2D)                                                             \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 20, 2, 16)        64        \n"," hNormalization)                                                 \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 10, 1, 8)          1160      \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 5, 1, 8)          0         \n"," 2D)                                                             \n","                                                                 \n"," batch_normalization_2 (Batc  (None, 5, 1, 8)          32        \n"," hNormalization)                                                 \n","                                                                 \n"," flatten (Flatten)           (None, 40)                0         \n","                                                                 \n"," dense (Dense)               (None, 64)                2624      \n","                                                                 \n"," dropout (Dropout)           (None, 64)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 32)                0         \n","                                                                 \n"," my_intermediate_layer (Dens  (None, 32)               1056      \n"," e)                                                              \n","                                                                 \n"," dropout_2 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 7,926\n","Trainable params: 7,870\n","Non-trainable params: 56\n","_________________________________________________________________\n","None\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/keras/optimizers/optimizer_v2/adam.py:110: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}],"source":["my_model = CNN((500, 90,1), n_classes)\n","\n","print(my_model.summary())\n","\n","my_model.compile(optimizer=tf.keras.optimizers.Adam(lr=learning_rate),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":203941,"status":"ok","timestamp":1672116313357,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"},"user_tz":-540},"id":"M52bNTjC41M5","outputId":"b0ce0dd6-7889-42bc-ec07-055a6d6fba15"},"outputs":[{"output_type":"stream","name":"stdout","text":["csv file importing...\n","go_sleep_ finished... xx= (375, 500, 90) yy= (375, 6)\n","pass_out_ finished... xx= (375, 500, 90) yy= (375, 6)\n","just_lay_ finished... xx= (375, 500, 90) yy= (375, 6)\n"," go_sleep_ = 375  just_lay_= 375  pass_out_= 375\n"]}],"source":["\n","# data import\n","x_go_sleep_, x_pass_out_, x_just_lay_, y_go_sleep_, y_pass_out_,y_just_lay_  = csv_import()\n","# d = readCsiAmp_PCA()\n","\n","print(\" go_sleep_ =\", len(x_go_sleep_), \" just_lay_=\", len(x_just_lay_),  \" pass_out_=\", len(x_pass_out_))"]},{"cell_type":"code","source":["smote = BorderlineSMOTE()\n","tt= x_go_sleep_ \n","tt = tt.reshape((tt.shape[0], tt.shape[1] * tt.shape[2])).astype(np.float32)\n","tt, y_go_sleep_ = smote.fit_resample(tt, y_go_sleep_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":378},"id":"-xvB_LN1tubC","executionInfo":{"status":"error","timestamp":1672116481729,"user_tz":-540,"elapsed":893,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"df491c17-51f8-4013-9c71-a15400d283ee"},"execution_count":10,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-1ab34a912020>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mtt\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mx_go_sleep_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mtt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_go_sleep_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_go_sleep_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     77\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 79\u001b[0;31m         self.sampling_strategy_ = check_sampling_strategy(\n\u001b[0m\u001b[1;32m     80\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msampling_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sampling_type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/imblearn/utils/_validation.py\u001b[0m in \u001b[0;36mcheck_sampling_strategy\u001b[0;34m(sampling_strategy, y, sampling_type, **kwargs)\u001b[0m\n\u001b[1;32m    499\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    500\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 501\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    502\u001b[0m             \u001b[0;34mf\"The target 'y' needs to have more than 1 class. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m             \u001b[0;34mf\"Got {np.unique(y).size} class instead\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The target 'y' needs to have more than 1 class. Got 1 class instead"]}]},{"cell_type":"code","source":["\n","\n","print(\" go_sleep_ =\", len(x_go_sleep_), \" just_lay_=\", len(x_just_lay_),  \" pass_out_=\", len(x_pass_out_))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"2PEC0__DtyS7","executionInfo":{"status":"error","timestamp":1672114036229,"user_tz":-540,"elapsed":788,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"7ddc16e3-4855-4cde-b060-fba676bcaad1"},"execution_count":11,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-28626aebd7f1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_go_sleep_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_go_sleep_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_go_sleep_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_go_sleep_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\" go_sleep_ =\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_go_sleep_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\" just_lay_=\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_just_lay_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;34m\" pass_out_=\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_pass_out_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     75\u001b[0m         \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m         \u001b[0marrays_transformer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mArraysTransformer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m         self.sampling_strategy_ = check_sampling_strategy(\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36m_check_X_y\u001b[0;34m(self, X, y, accept_sparse)\u001b[0m\n\u001b[1;32m    130\u001b[0m             \u001b[0maccept_sparse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m         \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_target_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindicate_one_vs_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    579\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    580\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 581\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    582\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    962\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"y cannot be None\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 964\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m    965\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    966\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    792\u001b[0m                 ) from e\n\u001b[1;32m    793\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mallow_nd\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 794\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    795\u001b[0m                 \u001b[0;34m\"Found array with dim %d. %s expected <= 2.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    796\u001b[0m                 \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Found array with dim 3. Estimator expected <= 2."]}]},{"cell_type":"code","execution_count":13,"metadata":{"id":"RUYkSaV91709","executionInfo":{"status":"ok","timestamp":1672116609907,"user_tz":-540,"elapsed":1314,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[],"source":["\n","# data shuffle\n","x_go_sleep_, y_go_sleep_ = shuffle(x_go_sleep_, y_go_sleep_, random_state=0)\n","x_just_lay_, y_just_lay_ = shuffle(x_just_lay_, y_just_lay_, random_state=0)\n","# x_lay, y_lay = shuffle(x_lay, y_lay, random_state=0)\n","x_pass_out_, y_pass_out_ = shuffle(x_pass_out_, y_pass_out_, random_state=0)\n","# x_sit, y_sit = shuffle(x_sit, y_sit, random_state=0)\n","# x_stand, y_stand = shuffle(x_stand, y_stand, random_state=0)\n","# x_stn, y_stn = shuffle(x_stn, y_stn, random_state=0)\n","\n","\n","testset_size = 0.25\n","\n","x_go_sleep_, x_go_sleep__t, y_go_sleep_, y_go_sleep__t = train_test_split(\n","    x_go_sleep_, y_go_sleep_, test_size=testset_size, shuffle=False)\n","\n","x_just_lay_, x_just_lay__t, y_just_lay_, y_just_lay__t = train_test_split(\n","    x_just_lay_, y_just_lay_, test_size=testset_size, shuffle=False)\n","\n","# x_lay, x_lay_t, y_lay, y_lay_t = train_test_split(\n","#     x_lay, y_lay, test_size=testset_size, shuffle=False)\n","\n","x_pass_out_, x_pass_out__t, y_pass_out_, y_pass_out__t = train_test_split(\n","    x_pass_out_, y_pass_out_, test_size=testset_size, shuffle=False)\n","\n","# x_sit, x_sit_t, y_sit, y_sit_t = train_test_split(\n","#     x_sit, y_sit, test_size=testset_size, shuffle=False)\n","\n","# x_stand, x_stand_t, y_stand, y_stand_t = train_test_split(\n","#     x_stand, y_stand, test_size=testset_size, shuffle=False)\n","\n","# x_stn, x_stn_t, y_stn, y_stn_t = train_test_split(\n","#     x_stn, y_stn, test_size=testset_size, shuffle=False)\n","\n","test_x = np.r_[x_go_sleep__t, x_pass_out__t,x_just_lay__t]\n","test_y = np.r_[y_go_sleep__t, y_pass_out__t,y_just_lay__t]\n","# test_y = test_y[:, 1:]\n"]},{"cell_type":"code","source":["# smote = BorderlineSMOTE()\n","test_x = x_go_sleep_.reshape((x_go_sleep_.shape[0], x_go_sleep_.shape[1] * x_go_sleep_.shape[2])).astype(np.float32)\n","# x_go_sleep_, [y_go_sleep_] = smote.fit_resample(x_go_sleep_, [y_go_sleep_])"],"metadata":{"id":"dPQyeEs242fL","executionInfo":{"status":"ok","timestamp":1672116622652,"user_tz":-540,"elapsed":298,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","execution_count":16,"metadata":{"id":"Pn1fLMO7r9BS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8376c612-543d-43c0-9719-88c420a5bb5b","executionInfo":{"status":"ok","timestamp":1672116681828,"user_tz":-540,"elapsed":49208,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["(423, 500, 90)\n","(423, 6)\n","shape: (423, 500, 90)\n","Epoch 1/6\n","27/27 [==============================] - 3s 59ms/step - loss: 1.6547 - accuracy: 0.3735 - val_loss: 1.7180 - val_accuracy: 0.3333\n","Epoch 2/6\n","27/27 [==============================] - 2s 61ms/step - loss: 1.5171 - accuracy: 0.4444 - val_loss: 1.6963 - val_accuracy: 0.3333\n","Epoch 3/6\n","27/27 [==============================] - 1s 49ms/step - loss: 1.3965 - accuracy: 0.5272 - val_loss: 1.6370 - val_accuracy: 0.3333\n","Epoch 4/6\n","27/27 [==============================] - 1s 48ms/step - loss: 1.3095 - accuracy: 0.5437 - val_loss: 1.5934 - val_accuracy: 0.3333\n","Epoch 5/6\n","27/27 [==============================] - 2s 73ms/step - loss: 1.2131 - accuracy: 0.6478 - val_loss: 1.5391 - val_accuracy: 0.3333\n","Epoch 6/6\n","27/27 [==============================] - 1s 51ms/step - loss: 1.1174 - accuracy: 0.6643 - val_loss: 1.4731 - val_accuracy: 0.3333\n","(423, 500, 90)\n","(423, 6)\n","shape: (423, 500, 90)\n","Epoch 1/6\n","27/27 [==============================] - 2s 86ms/step - loss: 0.9749 - accuracy: 0.7660 - val_loss: 1.4021 - val_accuracy: 0.3570\n","Epoch 2/6\n","27/27 [==============================] - 1s 49ms/step - loss: 0.9087 - accuracy: 0.7778 - val_loss: 1.2878 - val_accuracy: 0.5981\n","Epoch 3/6\n","27/27 [==============================] - 2s 63ms/step - loss: 0.8156 - accuracy: 0.8132 - val_loss: 1.1500 - val_accuracy: 0.6974\n","Epoch 4/6\n","27/27 [==============================] - 1s 51ms/step - loss: 0.7321 - accuracy: 0.8416 - val_loss: 1.0021 - val_accuracy: 0.8251\n","Epoch 5/6\n","27/27 [==============================] - 2s 69ms/step - loss: 0.6682 - accuracy: 0.8676 - val_loss: 0.8542 - val_accuracy: 0.8298\n","Epoch 6/6\n","27/27 [==============================] - 1s 47ms/step - loss: 0.6104 - accuracy: 0.8534 - val_loss: 0.6999 - val_accuracy: 0.8794\n","(423, 500, 90)\n","(423, 6)\n","shape: (423, 500, 90)\n","Epoch 1/6\n","27/27 [==============================] - 2s 62ms/step - loss: 0.5658 - accuracy: 0.8771 - val_loss: 0.6347 - val_accuracy: 0.8723\n","Epoch 2/6\n","27/27 [==============================] - 1s 49ms/step - loss: 0.5537 - accuracy: 0.9007 - val_loss: 0.4359 - val_accuracy: 0.9385\n","Epoch 3/6\n","27/27 [==============================] - 2s 74ms/step - loss: 0.4261 - accuracy: 0.9102 - val_loss: 0.3673 - val_accuracy: 0.9480\n","Epoch 4/6\n","27/27 [==============================] - 2s 67ms/step - loss: 0.3941 - accuracy: 0.9314 - val_loss: 0.3489 - val_accuracy: 0.9480\n","Epoch 5/6\n","27/27 [==============================] - 1s 51ms/step - loss: 0.4061 - accuracy: 0.9102 - val_loss: 0.2147 - val_accuracy: 0.9645\n","Epoch 6/6\n","27/27 [==============================] - 2s 68ms/step - loss: 0.3345 - accuracy: 0.9456 - val_loss: 0.3695 - val_accuracy: 0.9220\n","(423, 500, 90)\n","(423, 6)\n","shape: (423, 500, 90)\n","Epoch 1/6\n","27/27 [==============================] - 3s 109ms/step - loss: 0.3092 - accuracy: 0.9362 - val_loss: 0.3883 - val_accuracy: 0.8983\n","Epoch 2/6\n","27/27 [==============================] - 3s 95ms/step - loss: 0.2893 - accuracy: 0.9622 - val_loss: 0.1161 - val_accuracy: 0.9929\n","Epoch 3/6\n","27/27 [==============================] - 3s 104ms/step - loss: 0.2541 - accuracy: 0.9693 - val_loss: 0.0997 - val_accuracy: 0.9929\n","Epoch 4/6\n","27/27 [==============================] - 3s 105ms/step - loss: 0.2510 - accuracy: 0.9598 - val_loss: 0.1237 - val_accuracy: 0.9905\n","Epoch 5/6\n","27/27 [==============================] - 2s 87ms/step - loss: 0.2160 - accuracy: 0.9598 - val_loss: 0.1677 - val_accuracy: 0.9645\n","Epoch 6/6\n","27/27 [==============================] - 3s 101ms/step - loss: 0.2143 - accuracy: 0.9480 - val_loss: 0.0950 - val_accuracy: 0.9929\n"]}],"source":["\n","\n","##### main #####\n","\n","\n","# k_fold\n","kk = 2  # =========================================================================================\n","cnt = 0\n","# Launch the graph\n","for ii in range(kk * 10):\n","    cnt+= 1\n","    if cnt == 5:\n","      break\n","    i = ii % kk\n","    # Roll the data\n","    x_go_sleep_ = np.roll(x_go_sleep_, int(len(x_go_sleep_) / kk), axis=0)\n","    y_go_sleep_ = np.roll(y_go_sleep_, int(len(y_go_sleep_) / kk), axis=0)\n","    x_just_lay_ = np.roll(x_just_lay_, int(len(x_just_lay_) / kk), axis=0)\n","    y_just_lay_ = np.roll(y_just_lay_, int(len(y_just_lay_) / kk), axis=0)\n","    # x_lay = np.roll(x_lay, int(len(x_lay) / kk), axis=0)\n","    # y_lay = np.roll(y_lay, int(len(y_lay) / kk), axis=0)\n","    x_pass_out_ = np.roll(x_pass_out_, int(len(x_pass_out_) / kk), axis=0)\n","    y_pass_out_ = np.roll(y_pass_out_, int(len(y_pass_out_) / kk), axis=0)\n","    # x_sit = np.roll(x_sit, int(len(x_sit) / kk), axis=0)\n","    # y_sit = np.roll(y_sit, int(len(y_sit) / kk), axis=0)\n","    # x_stand = np.roll(x_stand, int(len(x_stand) / kk), axis=0)\n","    # y_stand = np.roll(y_stand, int(len(y_stand) / kk), axis=0)\n","    # x_stn = np.roll(x_stn, int(len(x_stn) / kk), axis=0)\n","    # y_stn = np.roll(y_stn, int(len(y_stn) / kk), axis=0)\n","\n","  \n","  # data separation // np.r_은 concatenate와 동일하다고 생각됨.\n","    wifi_x_train = np.r_[\n","        x_go_sleep_[int(len(x_go_sleep_) / kk):], x_pass_out_[int(len(x_pass_out_) / kk):], x_just_lay_[int(len(x_just_lay_) / kk):]]\n","    print(wifi_x_train.shape)\n","\n","    wifi_y_train = np.r_[\n","          y_go_sleep_[int(len(y_go_sleep_) / kk):], y_pass_out_[int(len(y_pass_out_) / kk):], y_just_lay_[int(len(y_just_lay_) / kk):]]\n","\n","    # wifi_y_train = wifi_y_train[:, 1:] #분류 클래스를 한개 줄임?\n","    print(wifi_y_train.shape)\n","    \n","\n","    wifi_x_validation = np.r_[\n","        x_go_sleep_[int(len(x_go_sleep_) / kk):], x_pass_out_[int(len(x_pass_out_) / kk):], x_just_lay_[int(len(x_just_lay_) / kk):]]\n","\n","    wifi_y_validation = np.r_[\n","          y_go_sleep_[int(len(y_go_sleep_) / kk):], y_pass_out_[int(len(y_pass_out_) / kk):], y_just_lay_[int(len(y_just_lay_) / kk):]]\n","\n","    # wifi_y_validation = wifi_y_validation[:, 1:]\n","    print(\"shape:\", wifi_x_train.shape)\n","\n","    # history = my_model.fit(wifi_x_train, wifi_y_train,\n","    #                        epochs=6, validation_data=(wifi_x_validation, wifi_y_validation),\n","    #                        batch_size=batch_size)\n","\n","    history = my_model.fit(wifi_x_train, wifi_y_train,\n","                            epochs=6,\n","                            validation_data=(wifi_x_validation, wifi_y_validation),\n","                            batch_size=batch_size)\n","!mkdir -p saved_model\n","my_model.save('iris.h5')\n"]},{"cell_type":"code","source":["smote = BorderlineSMOTE()\n","wifi_x_train = wifi_x_train.reshape((wifi_x_train.shape[0], wifi_x_train.shape[1] * wifi_x_train.shape[2])).astype(np.float32)\n","wifi_x_train, wifi_y_train = smote.fit_resample(wifi_x_train, wifi_y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":227},"id":"NOs-Cs936xrF","executionInfo":{"status":"error","timestamp":1672116776961,"user_tz":-540,"elapsed":4,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"0340c917-139b-4ac5-fa3e-9f121e051a35"},"execution_count":20,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-595244115cdc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0msmote\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBorderlineSMOTE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mwifi_x_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwifi_x_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwifi_x_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwifi_x_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mwifi_x_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mwifi_x_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwifi_y_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msmote\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwifi_x_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwifi_y_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: tuple index out of range"]}]},{"cell_type":"code","source":["print(len(wifi_x_train),len(wifi_y_train))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kq5QUbWu7O9J","executionInfo":{"status":"ok","timestamp":1672116792085,"user_tz":-540,"elapsed":291,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"67620c3f-6cda-4ec8-fe59-8cf978e42cc6"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["423 423\n"]}]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":263},"executionInfo":{"elapsed":6,"status":"error","timestamp":1672116572146,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"},"user_tz":-540},"id":"kUvMHflw9Fot","outputId":"b277e70f-ea0a-4885-a64e-670c261aaa53"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-84839604484a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# data separation // np.r_은 concatenate와 동일하다고 생각됨.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m wifi_x_train = np.r_[\n\u001b[0;32m----> 3\u001b[0;31m     x_go_sleep_[int(len(x_go_sleep_) / kk):], x_pass_out_[int(len(x_pass_out_) / kk):], x_just_lay_[int(len(x_just_lay_) / kk):]]\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwifi_x_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'kk' is not defined"]}],"source":["  # data separation // np.r_은 concatenate와 동일하다고 생각됨.\n","  wifi_x_train = np.r_[\n","      x_go_sleep_[int(len(x_go_sleep_) / kk):], x_pass_out_[int(len(x_pass_out_) / kk):], x_just_lay_[int(len(x_just_lay_) / kk):]]\n","  print(wifi_x_train.shape)\n","\n","  # wifi_x_train = [:, 1:]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1667926941974,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"},"user_tz":-540},"id":"G75-yKCx9vwv","outputId":"bfebeb44-33b5-47b4-8b79-5b9c0952aaa1"},"outputs":[{"output_type":"stream","name":"stdout","text":["(705, 6)\n"]}],"source":["wifi_y_train = np.r_[\n","      y_go_sleep_[int(len(y_go_sleep_) / kk):], y_pass_out_[int(len(y_pass_out_) / kk):], y_just_lay_[int(len(y_just_lay_) / kk):]]\n","\n","# wifi_y_train = wifi_y_train[:, 1:] #분류 클래스를 한개 줄임?\n","print(wifi_y_train.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7Ls3OR9A9qWQ"},"outputs":[],"source":["\n","\n","# wifi_x_validation = np.r_[\n","#     x_go_sleep_[int(len(x_go_sleep_) / kk):], x_pass_out_[int(len(x_pass_out_) / kk):], x_just_lay_[int(len(x_just_lay_) / kk):]]\n","\n","# wifi_y_validation = np.r_[\n","#       y_go_sleep_[int(len(y_go_sleep_) / kk):], y_pass_out_[int(len(y_pass_out_) / kk):], y_just_lay_[int(len(y_just_lay_) / kk):]]\n","\n","# # wifi_y_validation = wifi_y_validation[:, 1:]\n","# print(\"shape:\", wifi_x_train.shape)\n","\n","# # history = my_model.fit(wifi_x_train, wifi_y_train,\n","# #                        epochs=6, validation_data=(wifi_x_validation, wifi_y_validation),\n","# #                        batch_size=batch_size)\n","\n","# history = my_model.fit(wifi_x_train, wifi_y_train,\n","#                         epochs=18,\n","#                         validation_data=(wifi_x_validation, wifi_y_validation),\n","#                         batch_size=batch_size)\n","    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nG7YMDhj6kq-"},"outputs":[],"source":["#정확성 사진 테스트\n","# acc = history.history['accuracy']\n","# val_acc = history.history['val_accuracy']\n","\n","# loss = history.history['loss']\n","# val_loss = history.history['val_loss']\n","\n","# plt.figure(figsize=(8, 8))\n","# # plt.subplot(2, 1, 1)\n","# plt.plot(acc, label='Training Accuracy')\n","# plt.plot(val_acc, label='Validation Accuracy')\n","# plt.legend(loc='lower right')\n","# plt.ylabel('Accuracy')\n","# plt.ylim([min(min(plt.ylim()), 0.7), 1])\n","# plt.title('Training and Validation Accuracy ' + str(ii))\n","\n","# '''\n","# plt.subplot(2, 1, 2)\n","# plt.plot(loss, label='Training Loss')\n","# plt.plot(val_loss, label='Validation Loss')\n","# plt.legend(loc='upper right')\n","# plt.ylabel('Cross Entropy')\n","# plt.ylim([0, 1.0])\n","# plt.title('Training and Validation Loss' + str(ii))\n","# plt.xlabel('epoch')\n","# '''\n","# plt.savefig(\"figs/fig_\" + str(ii) + \".png\", dpi=150)\n","\n","# print(\"saved!: \" + str(ii))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"JnwQJ9ZX6WGk","executionInfo":{"status":"error","timestamp":1667926945053,"user_tz":-540,"elapsed":3086,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"2b066330-c26f-4926-b003-7deaecfa86c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["test size:  (282, 500, 90)\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 166, 29, 4)        104       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 82, 14, 4)        0         \n"," )                                                               \n","                                                                 \n"," batch_normalization (BatchN  (None, 82, 14, 4)        16        \n"," ormalization)                                                   \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 41, 7, 16)         592       \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 20, 2, 16)        0         \n"," 2D)                                                             \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 20, 2, 16)        64        \n"," hNormalization)                                                 \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 10, 1, 8)          1160      \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 5, 1, 8)          0         \n"," 2D)                                                             \n","                                                                 \n"," batch_normalization_2 (Batc  (None, 5, 1, 8)          32        \n"," hNormalization)                                                 \n","                                                                 \n"," flatten (Flatten)           (None, 40)                0         \n","                                                                 \n"," dense (Dense)               (None, 64)                2624      \n","                                                                 \n"," dropout (Dropout)           (None, 64)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 32)                2080      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 32)                0         \n","                                                                 \n"," my_intermediate_layer (Dens  (None, 32)               1056      \n"," e)                                                              \n","                                                                 \n"," dropout_2 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 6)                 198       \n","                                                                 \n","=================================================================\n","Total params: 7,926\n","Trainable params: 7,870\n","Non-trainable params: 56\n","_________________________________________________________________\n","9/9 [==============================] - 0s 45ms/step - loss: 0.0408 - accuracy: 0.9965\n","테스트 성능 : 99.6454%\n","0.9964538812637329\n","9/9 [==============================] - 1s 42ms/step\n","lst 282 lst2 282\n","[[94  0  1]\n"," [ 0 94  0]\n"," [ 0  0 93]]\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-9d276c546c9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;31m#     # plt.ylim(f_min, f_max)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Kalman_FT_Feature/cv_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_y\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\".png\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m150\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'done:'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    721\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    722\u001b[0m     \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 723\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    724\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    725\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   2201\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_visible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframeon\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2203\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2205\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mframeon\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2124\u001b[0m                     \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2125\u001b[0m                     \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2126\u001b[0;31m                     **kwargs)\n\u001b[0m\u001b[1;32m   2127\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m         }\n\u001b[1;32m    513\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 514\u001b[0;31m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    515\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpil_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    516\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    391\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    392\u001b[0m               else nullcontext()):\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1736\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2628\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2044\u001b[0m                 \u001b[0moffsets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumn_stack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mys\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2045\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2046\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_scalarmappable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2047\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2048\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_affine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/collections.py\u001b[0m in \u001b[0;36mupdate_scalarmappable\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    789\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_filled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 791\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_facecolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_A\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_alpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    792\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_stroked\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_edgecolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_A\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_alpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cm.py\u001b[0m in \u001b[0;36mto_rgba\u001b[0;34m(self, x, alpha, bytes, norm)\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m             \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 245\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    246\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mrgba\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, X, alpha, bytes)\u001b[0m\n\u001b[1;32m    611\u001b[0m                 \u001b[0;31m# override its alpha just as for any other value.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 613\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlut\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxa\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'clip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    614\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m             \u001b[0;31m# Return a tuple if the input was a scalar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Cannot cast array data from dtype('complex128') to dtype('int64') according to the rule 'safe'"]}],"source":["\n","# 실제 테스트 진행\n","\n","# print(\"test size: \", test_x.shape)\n","# my_model.summary()\n","# loss_and_metrics = my_model.evaluate(test_x, test_y)\n","# print(\"테스트 성능 : {}%\".format(round(loss_and_metrics[1] * 100, 4)))\n","# print(loss_and_metrics[1])\n","\n","# asdf = my_model.predict(test_x)\n","# lst = []\n","# lst2 = []\n","# for a in asdf:\n","#     lst.append(np.argmax(a))\n","# for a in test_y:\n","#     lst2.append(np.argmax(a))\n","\n","# print(\"lst\", len(lst), \"lst2\", len(lst2))\n","\n","# from sklearn.metrics import confusion_matrix\n","# cm = confusion_matrix(lst, lst2)\n","# print(cm)\n","\n","\n","\n","\n","# # 실제 테스트 진행\n","\n","# feature_extractor = keras.Model(\n","#     inputs=my_model.inputs,\n","#     outputs=my_model.get_layer(name=\"my_intermediate_layer\").output,\n","# )\n","# features = feature_extractor(test_x)\n","# features = features.numpy()\n","\n","# f_max = max(map(max, features))\n","# f_min = min(map(min, features))\n","# # for k in range(len(test_y)):\n","# #   print(np.argmax(test_y[i]))\n","# names = [ \"none\",\"go_sleep_\",\"stand\",\"pass_out\", \"just_lay_\",\"stn\"]\n","\n","# for i, a in enumerate(features):\n","\n","#     fig = plt.figure(1)\n","#     image = test_x[i]\n","#     # plt.subplot(121)\n","#     plt.pcolormesh(image)\n","#     plt.axis('off')\n","#     # plt.title(names[np.argmax(test_y[i])])\n","\n","# #     plt.plot(122)\n","# #     # plt.bar(range(32), a)\n","# #     # plt.ylim(f_min, f_max)\n","\n","#     plt.savefig(\"Kalman_FT_Feature/cv_\"+names[np.argmax(test_y[i])] + str(i) + \".png\", dpi=150)\n","#     plt.close(fig)\n","#     print('done:', i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kqUynYO9S2qv"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"authorship_tag":"ABX9TyPUIHPqiWnseis1moV0S0WN"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}