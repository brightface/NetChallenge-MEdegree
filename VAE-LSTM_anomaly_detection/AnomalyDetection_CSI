{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"dd3zJTKFLe72"},"outputs":[],"source":["import warnings\n","\n","def fxn():\n","    warnings.warn(\"deprecated\", DeprecationWarning)\n","\n","with warnings.catch_warnings():\n","    warnings.simplefilter(\"ignore\")\n","    fxn()"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-CcMdYADLmkQ","executionInfo":{"status":"ok","timestamp":1667680284016,"user_tz":-540,"elapsed":3690,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"14ec8bce-f50e-40b4-a7e2-1fba4026b04d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"x5K8e5HIfCN0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cd /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5wBRD1ApLpSi","executionInfo":{"status":"ok","timestamp":1667680284017,"user_tz":-540,"elapsed":8,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"8d72bf4e-5f97-4e95-e9e0-8d517e94f0a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes\n"]}]},{"cell_type":"code","source":["ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lrvd1fjSMCfl","executionInfo":{"status":"ok","timestamp":1667680284017,"user_tz":-540,"elapsed":6,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"outputId":"76fce5f0-220e-48d3-ab60-32c4bba43fea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" base.py                               models.py         trainers.py\n"," data_loader.py                        NAB_config.json   train.py\n","'Did it-NAB-anomaly-detection.ipynb'   \u001b[0m\u001b[01;34m__pycache__\u001b[0m/      utils.py\n"]}]},{"cell_type":"code","source":["# !pip install tensorflow-probability==0.7.0\n","# !pip install tensorflow-gpu==1.15.2\n","# !pip install GPy==1.9.9\n","# !pip install munch==2.3.2\n","# !pip install opencv-contrib-python==4.1.0.25"],"metadata":{"id":"L9BtZ8AyL9H2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# !pip uninstall pandas\n","# !pip install pandas"],"metadata":{"id":"kXGCd1epkZer"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# !pip uninstall numpy\n","# !pip install numpy==1.16.0"],"metadata":{"id":"VMqg8xOO2D5R"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YRbe9vT8Le75","executionInfo":{"status":"ok","timestamp":1667680285776,"user_tz":-540,"elapsed":1762,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"57d3e2b9-6b1e-499d-b253-85c5529c5a64"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/scipy/__init__.py:149: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.16.0\n","  UserWarning)\n"]}],"source":["import tensorflow as tf\n","import tensorflow_probability as tfp\n","import numpy as np\n","import matplotlib.pylab as plt\n","from matplotlib.pyplot import plot, ion, show, savefig, cla, figure\n","import random\n","import time"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jyCbleKJLe76"},"outputs":[],"source":["import os\n","os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   # see issue #152\n","os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","import tensorflow as tf\n","from data_loader import DataGenerator\n","from models import VAEmodel, lstmKerasModel\n","from trainers import vaeTrainer\n","\n","from utils import process_config, create_dirs, get_args"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m0jy5nFzLe77","outputId":"4a3caa6c-5cf9-485f-eb1e-fdc76a010c93","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667680289568,"user_tz":-540,"elapsed":4,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}],"source":["from tensorflow.python.client import device_lib\n","\n","def get_available_gpus():\n","    local_device_protos = device_lib.list_local_devices()\n","    return [x.name for x in local_device_protos if x.device_type == 'GPU']\n","\n","print(get_available_gpus())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WZgvnvQTLe77","outputId":"3844dc1e-df7e-47f9-ff3f-0d9a34b067f8","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1667680300714,"user_tz":-540,"elapsed":11149,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Device mapping:\n","/job:localhost/replica:0/task:0/device:XLA_CPU:0 -> device: XLA_CPU device\n","/job:localhost/replica:0/task:0/device:XLA_GPU:0 -> device: XLA_GPU device\n","\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:62: The name tf.variable_scope is deprecated. Please use tf.compat.v1.variable_scope instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:64: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/models.py:25: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow_core/python/data/util/random_seed.py:58: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/models.py:31: DatasetV1.make_initializable_iterator (from tensorflow.python.data.ops.dataset_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `for ... in dataset:` to iterate over a dataset. If using `tf.estimator`, return the `Dataset` object directly from your input function. As a last resort, you can use `tf.compat.v1.data.make_initializable_iterator(dataset)`.\n","WARNING:tensorflow:\n","The TensorFlow contrib module will not be included in TensorFlow 2.0.\n","For more information, please see:\n","  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n","  * https://github.com/tensorflow/addons\n","  * https://github.com/tensorflow/io (for I/O related ops)\n","If you depend on functionality not listed there, please file an issue.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/models.py:48: conv2d (from tensorflow.python.layers.convolutional) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.keras.layers.Conv2D` instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow_core/python/layers/convolutional.py:424: Layer.apply (from tensorflow.python.keras.engine.base_layer) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `layer.__call__` method instead.\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/models.py:141: flatten (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use keras.layers.flatten instead.\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/models.py:145: dense (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use keras.layers.Dense instead.\n"]},{"output_type":"stream","name":"stdout","text":["conv_1: Tensor(\"encoder/conv2d/LeakyRelu:0\", shape=(?, 16, 1, 32), dtype=float32)\n","conv_2: Tensor(\"encoder/conv2d_1/LeakyRelu:0\", shape=(?, 8, 1, 64), dtype=float32)\n","conv_3: Tensor(\"encoder/conv2d_2/LeakyRelu:0\", shape=(?, 4, 1, 128), dtype=float32)\n","conv_4: Tensor(\"encoder/conv2d_3/LeakyRelu:0\", shape=(?, 1, 1, 512), dtype=float32)\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:73: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"]},{"output_type":"stream","name":"stdout","text":["finish encoder: \n","Tensor(\"encoder/MultivariateNormalDiag/sample/affine_linear_operator/forward/add:0\", shape=(?, 6), dtype=float32)\n","\n","\n","decoded_2 is: Tensor(\"decoder/Reshape_1:0\", shape=(?, 4, 1, 128), dtype=float32)\n","decoded_3 is: Tensor(\"decoder/Reshape_2:0\", shape=(?, 8, 1, 64), dtype=float32)\n","decoded_4 is: Tensor(\"decoder/Reshape_3:0\", shape=(?, 16, 1, 32), dtype=float32)\n","decoded_5 is: Tensor(\"decoder/Reshape_4:0\", shape=(?, 32, 1, 16), dtype=float32)\n","decoded_6 is: Tensor(\"decoder/conv2d_4/BiasAdd:0\", shape=(?, 24, 1, 1), dtype=float32)\n","finish decoder: \n","Tensor(\"decoder/Reshape_5:0\", shape=(?, 24, 1), dtype=float32)\n","\n","\n","sigma2: \n","Tensor(\"sigma2_dataset/Square:0\", shape=(), dtype=float32)\n","\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:97: The name tf.get_collection is deprecated. Please use tf.compat.v1.get_collection instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:97: The name tf.GraphKeys is deprecated. Please use tf.compat.v1.GraphKeys instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/utils.py:82: The name tf.trainable_variables is deprecated. Please use tf.compat.v1.trainable_variables instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:110: The name tf.train.AdamOptimizer is deprecated. Please use tf.compat.v1.train.AdamOptimizer instead.\n","\n"]},{"output_type":"stream","name":"stdout","text":["The total number of trainable parameters in the encoder model is: 306308\n","The total number of trainable parameters in the decoder model is: 331121\n","The total number of trainable parameters in the sigma2_dataset model is: 0\n","Total number of trainable parameters in the VAE network is: 637429\n","gvs for dataset: [(<tf.Tensor 'gradients/encoder/conv2d/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 1, 32) dtype=float32>, <tf.Variable 'encoder/conv2d/kernel:0' shape=(3, 1, 1, 32) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d/BiasAdd_grad/tuple/control_dependency_1:0' shape=(32,) dtype=float32>, <tf.Variable 'encoder/conv2d/bias:0' shape=(32,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_1/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 32, 64) dtype=float32>, <tf.Variable 'encoder/conv2d_1/kernel:0' shape=(3, 1, 32, 64) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_1/BiasAdd_grad/tuple/control_dependency_1:0' shape=(64,) dtype=float32>, <tf.Variable 'encoder/conv2d_1/bias:0' shape=(64,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_2/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 64, 128) dtype=float32>, <tf.Variable 'encoder/conv2d_2/kernel:0' shape=(3, 1, 64, 128) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_2/BiasAdd_grad/tuple/control_dependency_1:0' shape=(128,) dtype=float32>, <tf.Variable 'encoder/conv2d_2/bias:0' shape=(128,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_3/Conv2D_grad/tuple/control_dependency_1:0' shape=(4, 1, 128, 512) dtype=float32>, <tf.Variable 'encoder/conv2d_3/kernel:0' shape=(4, 1, 128, 512) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/conv2d_3/BiasAdd_grad/tuple/control_dependency_1:0' shape=(512,) dtype=float32>, <tf.Variable 'encoder/conv2d_3/bias:0' shape=(512,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/dense/MatMul_grad/tuple/control_dependency_1:0' shape=(512, 24) dtype=float32>, <tf.Variable 'encoder/dense/kernel:0' shape=(512, 24) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/dense/BiasAdd_grad/tuple/control_dependency_1:0' shape=(24,) dtype=float32>, <tf.Variable 'encoder/dense/bias:0' shape=(24,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/code_mean/MatMul_grad/tuple/control_dependency_1:0' shape=(24, 6) dtype=float32>, <tf.Variable 'encoder/code_mean/kernel:0' shape=(24, 6) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/code_mean/BiasAdd_grad/tuple/control_dependency_1:0' shape=(6,) dtype=float32>, <tf.Variable 'encoder/code_mean/bias:0' shape=(6,) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/code_std_dev/MatMul_grad/tuple/control_dependency_1:0' shape=(24, 6) dtype=float32>, <tf.Variable 'encoder/code_std_dev/kernel:0' shape=(24, 6) dtype=float32_ref>), (<tf.Tensor 'gradients/encoder/code_std_dev/BiasAdd_grad/tuple/control_dependency_1:0' shape=(6,) dtype=float32>, <tf.Variable 'encoder/code_std_dev/bias:0' shape=(6,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/dense/MatMul_grad/tuple/control_dependency_1:0' shape=(6, 512) dtype=float32>, <tf.Variable 'decoder/dense/kernel:0' shape=(6, 512) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/dense/BiasAdd_grad/tuple/control_dependency_1:0' shape=(512,) dtype=float32>, <tf.Variable 'decoder/dense/bias:0' shape=(512,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d/Conv2D_grad/tuple/control_dependency_1:0' shape=(1, 1, 512, 512) dtype=float32>, <tf.Variable 'decoder/conv2d/kernel:0' shape=(1, 1, 512, 512) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d/BiasAdd_grad/tuple/control_dependency_1:0' shape=(512,) dtype=float32>, <tf.Variable 'decoder/conv2d/bias:0' shape=(512,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_1/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 128, 128) dtype=float32>, <tf.Variable 'decoder/conv2d_1/kernel:0' shape=(3, 1, 128, 128) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_1/BiasAdd_grad/tuple/control_dependency_1:0' shape=(128,) dtype=float32>, <tf.Variable 'decoder/conv2d_1/bias:0' shape=(128,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_2/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 64, 64) dtype=float32>, <tf.Variable 'decoder/conv2d_2/kernel:0' shape=(3, 1, 64, 64) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_2/BiasAdd_grad/tuple/control_dependency_1:0' shape=(64,) dtype=float32>, <tf.Variable 'decoder/conv2d_2/bias:0' shape=(64,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_3/Conv2D_grad/tuple/control_dependency_1:0' shape=(3, 1, 32, 32) dtype=float32>, <tf.Variable 'decoder/conv2d_3/kernel:0' shape=(3, 1, 32, 32) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_3/BiasAdd_grad/tuple/control_dependency_1:0' shape=(32,) dtype=float32>, <tf.Variable 'decoder/conv2d_3/bias:0' shape=(32,) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_4/Conv2D_grad/tuple/control_dependency_1:0' shape=(9, 1, 16, 1) dtype=float32>, <tf.Variable 'decoder/conv2d_4/kernel:0' shape=(9, 1, 16, 1) dtype=float32_ref>), (<tf.Tensor 'gradients/decoder/conv2d_4/BiasAdd_grad/tuple/control_dependency_1:0' shape=(1,) dtype=float32>, <tf.Variable 'decoder/conv2d_4/bias:0' shape=(1,) dtype=float32_ref>)]\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:126: The name tf.train.Saver is deprecated. Please use tf.compat.v1.train.Saver instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:135: The name tf.global_variables_initializer is deprecated. Please use tf.compat.v1.global_variables_initializer instead.\n","\n","WARNING:tensorflow:From /content/drive/MyDrive/넷첼린지멘토링자료/netchaCode/Original/VAE-LSTM-for-anomaly-detection-master2/codes/base.py:136: The name tf.local_variables_initializer is deprecated. Please use tf.compat.v1.local_variables_initializer instead.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Reach the definition of loss for VAE\n","checkpoint_dir at loading: ../experiments/local-results/NAB/machine_temp/batch-32/NAB-machine_temp-24-12-6-fixedSigma-0.1/checkpoint/\n","No model loaded.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1296x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# load VAE model\n","config = process_config('NAB_config.json')\n","# create the experiments dirs\n","create_dirs([config['result_dir'], config['checkpoint_dir']])\n","# create tensorflow session\n","sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n","# create your data generator\n","data = DataGenerator(config)\n","# create a CNN model\n","model_vae = VAEmodel(config)\n","# create a CNN model\n","trainer_vae = vaeTrainer(sess, model_vae, data, config)\n","model_vae.load(sess)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T0emY0QILe78","outputId":"0ce6a0f2-285e-4ff2-a32a-132f605c5b25","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667680301388,"user_tz":-540,"elapsed":678,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n"]},{"output_type":"stream","name":"stdout","text":["Finish processing the embeddings of the entire dataset.\n","The first a few embeddings are\n","[[ 0.00476757  0.04352291  0.02820629 -0.02224157 -0.00311813 -0.01713986]\n"," [ 0.00924132  0.04631768  0.02581064 -0.0209705  -0.0004484  -0.01416953]\n"," [ 0.00244131  0.0408458   0.02511737 -0.02135502 -0.00591038 -0.02026467]\n"," [ 0.00979549  0.05047159  0.03081072 -0.02231103 -0.00178298 -0.0182819 ]\n"," [ 0.00627494  0.04947463  0.03074482 -0.02417433 -0.0024003  -0.0184672 ]]\n","Model: \"model\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_1 (InputLayer)         [(None, 11, 6)]           0         \n","_________________________________________________________________\n","lstm (LSTM)                  (None, 11, 64)            18176     \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, 11, 64)            33024     \n","_________________________________________________________________\n","lstm_2 (LSTM)                (None, 11, 6)             1704      \n","=================================================================\n","Total params: 52,904\n","Trainable params: 52,904\n","Non-trainable params: 0\n","_________________________________________________________________\n","../experiments/local-results/NAB/machine_temp/batch-32/NAB-machine_temp-24-12-6-fixedSigma-0.1/checkpoint/lstm/checkpoint\n","No LSTM model loaded.\n"]}],"source":["# load LSTM model\n","lstm_model = lstmKerasModel(data)\n","lstm_model.produce_embeddings(config, model_vae, data, sess)\n","lstm_nn_model = lstm_model.create_lstm_model(config)\n","lstm_nn_model.summary()   # Display the model's architecture\n","\n","# checkpoint path\n","checkpoint_path = config['checkpoint_dir_lstm'] + \"cp.ckpt\"\n","checkpoint_dir = os.path.dirname(checkpoint_path)\n","# Create a callback that saves the model's weights\n","cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,\n","                                                 save_weights_only=True,\n","                                                 verbose=1)\n","# load weights if possible\n","lstm_model.load_model(lstm_nn_model, config, checkpoint_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"emBSGUgDLe78","executionInfo":{"status":"ok","timestamp":1667680301878,"user_tz":-540,"elapsed":491,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"522856bb-c17c-462f-ce1c-f59c1f60ca32"},"outputs":[{"output_type":"stream","name":"stdout","text":["k\n","The given sequence has 500 samples\n","(477, 24, 1)\n","(213, 12, 24, 1)\n"]}],"source":["# load normalised time series\n","save_dir = '../datasets/NAB-known-anomaly/'\n","dataset = config['dataset']\n","filename = '{}.npz'.format(dataset)\n","result = dict(np.load(save_dir+filename, allow_pickle=True))\n","print(\"k\")\n","# print(result['test'][0])\n","\n","# if dataset == 'machine_temp':\n","#     result['test'] = result['test'][0]\n","#     result['idx_anomaly_test'] = result['idx_anomaly_test'][0]\n","#     result['t_test'] = result['t_test'][0]\n","\n","# slice into rolling windows and rolling sequences\n","def slice_rolling_windows_and_sequences(config, time_seq):\n","    n_sample = 0\n","\n","    # for value in result['test']:\n","    #     n_sample += 1\n","    n_sample = 500\n","    print(\"The given sequence has {} samples\".format(n_sample))\n","    n_vae_win = n_sample - config['l_win'] + 1\n","    rolling_windows = np.zeros((n_vae_win, config['l_win']))\n","    for i in range(n_vae_win):\n","        rolling_windows[i] = time_seq[i:i + config['l_win']]\n","        sample_m = np.mean(rolling_windows, axis=1)\n","        sample_std = np.std(rolling_windows, axis=1)\n","\n","        n_lstm_seq = n_sample - config['l_seq']*config['l_win']+1\n","        lstm_seq = np.zeros((n_lstm_seq, config['l_seq'], config['l_win']))\n","    for i in range(n_lstm_seq):\n","        cur_seq = time_seq[i:i+config['l_seq']*config['l_win']]\n","        for j in range(config['l_seq']):\n","            lstm_seq[i,j] = cur_seq[config['l_win']*j:config['l_win']*(j+1)]\n","    \n","    return rolling_windows, lstm_seq, sample_m, sample_std\n","\n","test_windows, test_seq, test_sample_m, test_sample_std = slice_rolling_windows_and_sequences(config, result['test'])\n","test_windows = np.expand_dims(test_windows, -1)\n","test_seq = np.expand_dims(test_seq, -1)\n","print(test_windows.shape)\n","print(test_seq.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ToL38uyeLe79"},"outputs":[],"source":["# Evaluate ELBO and LSTM prediction error on the validation set\n","# evaluate some anomaly detection metrics\n","def evaluate_vae_anomaly_metrics_for_a_window(test_win):\n","    feed_dict = {model_vae.original_signal: np.expand_dims(test_win, 0),\n","                 model_vae.is_code_input: False,\n","                 model_vae.code_input: np.zeros((1, config['code_size']))}\n","\n","    # VAE reconstruction error\n","    recons_win_vae = np.squeeze(sess.run(model_vae.decoded, feed_dict=feed_dict))\n","    test_vae_recons_error = np.sum(np.square(recons_win_vae - test_win))\n","\n","    # VAE latent embedding likelihood\n","    vae_code_mean, vae_code_std = sess.run([model_vae.code_mean, model_vae.code_std_dev], feed_dict=feed_dict)\n","    test_vae_kl = 0.5 * (np.sum(np.square(vae_code_mean)) + \\\n","                            np.sum(np.square(vae_code_std)) - \\\n","                            np.sum(np.log(np.square(vae_code_std))) - config['code_size'])\n","\n","    # VAE ELBO loss\n","    sigma2 = 0.0005\n","    input_dims = model_vae.input_dims\n","    sigma_regularisor = input_dims/2. * np.log(sigma2) + input_dims * np.pi\n","    test_vae_elbo = test_vae_recons_error/sigma2 + test_vae_kl + sigma_regularisor\n","    return test_vae_recons_error, test_vae_kl, test_vae_elbo\n","\n","def evaluate_lstm_anomaly_metric_for_a_seq(test_seq):\n","    feed_dict = {model_vae.original_signal: test_seq,\n","                 model_vae.is_code_input: False,\n","                 model_vae.code_input: np.zeros((1, config['code_size']))}\n","    vae_embedding = np.squeeze(sess.run(model_vae.code_mean, feed_dict=feed_dict))\n","    #print(vae_embedding.shape)\n","    lstm_embedding = np.squeeze(lstm_nn_model.predict(np.expand_dims(vae_embedding[:config['l_seq']-1], 0), batch_size=1))\n","    lstm_embedding_error = np.sum(np.square(vae_embedding[1:] - lstm_embedding))\n","    \n","    # LSTM prediction error\n","    feed_dict_lstm = {model_vae.original_signal: np.zeros((config['l_seq'] - 1, config['l_win'], 1)),\n","                      model_vae.is_code_input: True,\n","                      model_vae.code_input: lstm_embedding}\n","    recons_win_lstm = np.squeeze(sess.run(model_vae.decoded, feed_dict=feed_dict_lstm))\n","    lstm_recons_error = np.sum(np.square(recons_win_lstm - np.squeeze(test_seq[1:])))\n","    return lstm_recons_error, lstm_embedding_error\n","\n","n_val_vae = data.val_set_vae['data'].shape[0]\n","n_val_lstm = data.val_set_lstm['data'].shape[0]\n","\n","val_vae_recons_error = np.zeros(n_val_vae)\n","val_vae_kl_error = np.zeros(n_val_vae)\n","val_vae_elbo_loss = np.zeros(n_val_vae)\n","for i in range(n_val_vae):\n","    val_vae_recons_error[i], val_vae_kl_error[i], val_vae_elbo_loss[i] = evaluate_vae_anomaly_metrics_for_a_window(data.val_set_vae['data'][i])\n","\n","val_lstm_recons_error, val_lstm_embedding_error = np.zeros(n_val_lstm), np.zeros(n_val_lstm)\n","for i in range(n_val_lstm):\n","    val_lstm_recons_error[i], val_lstm_embedding_error[i] = evaluate_lstm_anomaly_metric_for_a_seq(data.val_set_lstm['data'][i])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G29cXbKrLe7-"},"outputs":[],"source":["from scipy.stats import norm\n","def plot_histogram(test_anomaly_metric, n_bins, title, mean=None, std=None, xlim=None, saveplot=False):\n","    test_anomaly_list = np.squeeze(np.ndarray.flatten(test_anomaly_metric))\n","    his = plt.hist(test_anomaly_list, bins=n_bins, density=True)\n","    if mean is None and std is None:\n","        mean = np.mean(test_anomaly_list)\n","        std = np.std(test_anomaly_list)\n","        legend_label = None\n","    else:\n","        legend_label = 1\n","    x_axis = np.arange(mean-5*std, mean+5*std, std/100)\n","    plt.plot(x_axis, norm.pdf(x_axis,mean,std))\n","    plt.title(title)\n","    plt.xlabel('anomaly score value')\n","    plt.ylabel('probability density')\n","    if xlim is not None:\n","        plt.xlim(0, xlim)\n","    else:\n","        plt.xlim(0, np.amax(test_anomaly_list))\n","    if legend_label is None:\n","        plt.legend(('Fitted Gaussian', 'histogram'))\n","    else:\n","        plt.legend(('normal data distribution','test data distribution (contain anomalies)'))\n","    if saveplot:\n","        savefig(config['result_dir']+'reconstruction_error_histogram.pdf')\n","    else:\n","        plt.show()\n","    threshold_25 = np.percentile(test_anomaly_list, 25)\n","    threshold_75 = np.percentile(test_anomaly_list, 75)\n","    threshold_1 = np.percentile(test_anomaly_list, 99)\n","    idx_large_error = np.squeeze(np.argwhere(test_anomaly_metric > threshold_1))\n","#     print(his[0][-20:])\n","#     print(his[1][-20:])\n","    print(\"25% percentile: {}\".format(threshold_25))\n","    print(\"75% percentile: {}\".format(threshold_75))\n","#     print(\"Median: {}\".format(np.median(test_anomaly_list)))\n","#     print(\"Mean: {}\".format(np.mean(test_anomaly_list)))\n","#     print(\"Std dev: {}\".format(np.std(test_anomaly_list)))\n","    print(\"These windows scored the top 1% of anomaly metric ({}): \\n{}\".format(threshold_1, idx_large_error))\n","    return mean, std"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-0lH_KX9Le7_","executionInfo":{"status":"ok","timestamp":1667680303362,"user_tz":-540,"elapsed":6,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/","height":368},"outputId":"be53c321-a115-420b-dbbc-40c10679031f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["25% percentile: 873239.2721464694\n","75% percentile: 1502643.5972115162\n","These windows scored the top 1% of anomaly metric (2041082.6805795813): \n","30\n"]}],"source":["# Histogram of VAE ELBO loss - validation set\n","vae_elbo_m, vae_elbo_std = plot_histogram(val_vae_elbo_loss, 100, \n","                                          'VAE ELBO error distribution on the val set', \n","                                          mean=None, std=None, xlim=None)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7a-x8gs9Le7_","executionInfo":{"status":"ok","timestamp":1667680304095,"user_tz":-540,"elapsed":738,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/","height":368},"outputId":"39e45ffa-4c02-43a6-d2a4-7bb3b317892d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["25% percentile: 240.9804633437152\n","75% percentile: 288.876579069905\n","These windows scored the top 1% of anomaly metric (314.1851381105454): \n","19\n"]}],"source":["# Histogram of LSTM reconstruction error - validation set \n","#  --> to decide the anomaly detection threshold\n","lstm_recons_m, lstm_recons_std = plot_histogram(val_lstm_recons_error, 100,  \n","                                              'LSTM reconstruction error distribution on the val set', \n","                                              mean=None, std=None, xlim=None)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lLcpdxpsLe7_","executionInfo":{"status":"ok","timestamp":1667680305821,"user_tz":-540,"elapsed":1728,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ad01e200-d7d8-4f69-855e-9019be0ce7ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["All windows' reconstruction error is computed.\n","The total number of windows is 213\n"]}],"source":["# Evaluate the anomaly metrics on the test windows and sequences\n","n_test_lstm = test_seq.shape[0]\n","\n","test_lstm_recons_error, test_lstm_embedding_error = np.zeros(n_test_lstm), np.zeros(n_test_lstm)\n","for i in range(n_test_lstm):\n","    test_lstm_recons_error[i], test_lstm_embedding_error[i] = evaluate_lstm_anomaly_metric_for_a_seq(test_seq[i])\n","print(\"All windows' reconstruction error is computed.\")\n","print(\"The total number of windows is {}\".format(len(test_lstm_recons_error)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KvfOtzX7Le8A","executionInfo":{"status":"ok","timestamp":1667680307083,"user_tz":-540,"elapsed":1265,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/","height":368},"outputId":"8d77c2c2-57e5-483a-dc35-09b8d84e0328"},"outputs":[{"output_type":"stream","name":"stdout","text":["25% percentile: 127.28151926446705\n","75% percentile: 215.25804132481883\n","These windows scored the top 1% of anomaly metric (267.32303973519504): \n","[0 1 2]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Histogram of LSTM reconstruction error - test set \n","#  --> to detect anomaly now\n","_, _ = plot_histogram(test_lstm_recons_error, 100,\n","                      'LSTM reconstruction error distribution on the test set', \n","                      mean=lstm_recons_m, std=lstm_recons_std, xlim=None, saveplot=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cm9XVTs0Le8A","executionInfo":{"status":"ok","timestamp":1667680307084,"user_tz":-540,"elapsed":28,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"8a15af0c-80a6-4074-9cab-fbaa2fd13221"},"outputs":[{"output_type":"stream","name":"stdout","text":["(213,)\n"]}],"source":["# Produce the ground truth anomaly indices \n","# if result['idx_split'][0] == 0:\n","#     idx_anomaly_test = result['idx_anomaly_test']\n","# else:\n","#     idx_anomaly_test = result['idx_anomaly_test'][0]\n","idx_anomaly_test = result['idx_anomaly_test']    \n","anomaly_index_lstm = []\n","test_labels_lstm = np.zeros(n_test_lstm)\n","for i in range(len(idx_anomaly_test)):\n","    idx_start = idx_anomaly_test[i]-(config['l_win']*config['l_seq']-1)\n","    idx_end = idx_anomaly_test[i]+1\n","    if idx_start < 0:\n","        idx_start = 0\n","    if idx_end > n_test_lstm:\n","        idx_end = n_test_lstm\n","    anomaly_index_lstm.append(np.arange(idx_start,idx_end))\n","    test_labels_lstm[idx_start:idx_end] = 1\n","    \n","print(test_labels_lstm.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KCNo9-R8Le8B"},"outputs":[],"source":["def return_anomaly_idx_by_threshold(test_anomaly_metric, threshold):\n","    test_list = np.squeeze(np.ndarray.flatten(test_anomaly_metric))\n","    idx_error = np.squeeze(np.argwhere(test_anomaly_metric > threshold))\n","    \n","    if len(idx_error.shape) == 0:\n","        idx_error = np.expand_dims(idx_error, 0)\n","    \n","    return list(idx_error)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e4obpC80Le8B"},"outputs":[],"source":["def augment_detected_idx(idx_detected_anomaly, anomaly_index):\n","    n_anomaly = len(anomaly_index)\n","    idx_detected_anomaly_extended = list(idx_detected_anomaly)\n","    for i in range(n_anomaly):\n","        #print(idx_detected_anomaly)\n","        for j in idx_detected_anomaly:\n","            if j in anomaly_index[i]:\n","                in_original_detection = set(idx_detected_anomaly_extended)\n","                currect_anomaly_win = set(anomaly_index[i])\n","                idx_detected_anomaly_extended = idx_detected_anomaly_extended + list(currect_anomaly_win - in_original_detection)\n","                #print(j)\n","                break\n","                \n","    return list(np.sort(idx_detected_anomaly_extended))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rPnP8I9VLe8C"},"outputs":[],"source":["def count_TP_FP_FN(idx_detected_anomaly, anomaly_index, test_labels):\n","    n_TP = 0\n","    n_FP = 0\n","    n_detection = len(idx_detected_anomaly)\n","    for i in range(n_detection):\n","        if test_labels[idx_detected_anomaly[i]] == 1:\n","            n_TP = n_TP + 1\n","        else:\n","            n_FP = n_FP + 1\n","    \n","    idx_undetected = list(set(np.arange(len(test_labels)))- set(idx_detected_anomaly))\n","    n_FN = 0\n","    for i in idx_undetected:\n","        if test_labels[i] == 1:\n","            n_FN = n_FN + 1\n","    \n","    return n_TP, n_FP, n_FN"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o7h45pmvLe8C"},"outputs":[],"source":["def compute_precision_and_recall(idx_detected_anomaly, anomaly_index, test_labels):\n","    # compute true positive\n","    n_TP, n_FP, n_FN = count_TP_FP_FN(idx_detected_anomaly, anomaly_index, test_labels)\n","    \n","    if n_TP + n_FP == 0:\n","        precision = 1\n","    else:\n","        precision = n_TP / (n_TP + n_FP)\n","    recall = n_TP / (n_TP + n_FN)\n","    if precision + recall == 0:\n","        F1 = 0\n","    else:\n","        F1 = 2* (precision * recall)/(precision + recall)\n","    \n","    return precision, recall, F1, n_TP, n_FP, n_FN"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EGxSUjQeLe8C","executionInfo":{"status":"error","timestamp":1667680733674,"user_tz":-540,"elapsed":5379,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"07cca5f9-ac37-418e-93f0-2364b6cd9c8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43m스트리밍 출력 내용이 길어서 마지막 5000줄이 삭제되었습니다.\u001b[0m\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","163\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","163\n","212\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-d15fe801a651>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     25\u001b[0m     precision_aug[i], recall_aug[i], F1_aug[i], _, _, _ = compute_precision_and_recall(idx_detection_lstm_augmented, \n\u001b[1;32m     26\u001b[0m                                                                                        \u001b[0manomaly_index_lstm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m                                                                                        test_labels_lstm)\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0;31m#print(precision, recall, F1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 212 is out of bounds for axis 0 with size 200"]}],"source":["n_threshold = 200\n","precision = np.zeros(n_threshold)\n","recall = np.zeros(n_threshold)\n","F1 = np.zeros(n_threshold)\n","precision_aug = np.zeros(n_threshold)\n","recall_aug = np.zeros(n_threshold)\n","F1_aug = np.zeros(n_threshold)\n","i = 0\n","threshold_list = np.linspace(np.amin(test_lstm_recons_error), np.amax(test_lstm_recons_error), n_threshold, endpoint=True)\n","threshold_list = np.flip(threshold_list)\n","for threshold in threshold_list:\n","    #print(threshold_list[i])\n","    idx_detection_lstm = return_anomaly_idx_by_threshold(test_lstm_recons_error, threshold)\n","    precision[i], recall[i], F1[i], _, _, _ = compute_precision_and_recall(idx_detection_lstm, \n","                                                                           anomaly_index_lstm, \n","                                                                           test_labels_lstm)\n","    # augment the detection using the ground truth labels\n","    # a method to discount the factor one anomaly appears in multiple consecutive windows\n","    # introduced in \"Unsupervised anomaly detection via variational auto-encoder for seasonal kpis in web applications\"\n","    idx_detection_lstm_augmented = augment_detected_idx(idx_detection_lstm, anomaly_index_lstm) #list\n","    # print(idx_detection_lstm)\n","    # for i in idx_detection_lstm:\n","      # print(i)\n","    # print(idx_detection_lstm_augmented)\n","    precision_aug[i], recall_aug[i], F1_aug[i], _, _, _ = compute_precision_and_recall(idx_detection_lstm_augmented, \n","                                                                                       anomaly_index_lstm, \n","                                                                                       test_labels_lstm)\n","    i = i + 1\n","    #print(precision, recall, F1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0vQOzpu3Le8D","executionInfo":{"status":"ok","timestamp":1667680307086,"user_tz":-540,"elapsed":24,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1bb31abf-3a3c-48b6-a38e-fcf17626f27d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best F1 score is 0.9609756097560975\n","Best threshold is 114.29819876059221\n","At this threshold, precision is 0.9292452830188679, recall is 0.9949494949494949\n","Average precision is 0.7975631798648457\n","\n","Augmented detection:\n","Best F1 score is 0.9635036496350364\n","Best threshold is [251.0216583  250.24038139 249.45910448 248.67782756 247.89655065\n"," 247.11527374 246.33399683 245.55271992 244.77144301 243.99016609\n"," 243.20888918 242.42761227 241.64633536 240.86505845 240.08378154\n"," 239.30250462 238.52122771 237.7399508  236.95867389 236.17739698\n"," 235.39612007 234.61484315 233.83356624 233.05228933 232.27101242\n"," 231.48973551 230.7084586  229.92718168 229.14590477 228.36462786\n"," 227.58335095 226.80207404 226.02079713 225.23952021 224.4582433\n"," 223.67696639 222.89568948 222.11441257 221.33313566 220.55185874\n"," 219.77058183 218.98930492 218.20802801 217.4267511  216.64547419\n"," 215.86419727 215.08292036 214.30164345 213.52036654 212.73908963\n"," 211.95781272 211.1765358  210.39525889 209.61398198 208.83270507\n"," 208.05142816 207.27015125 206.48887434 205.70759742 204.92632051\n"," 204.1450436  203.36376669 202.58248978 201.80121287 201.01993595\n"," 200.23865904 199.45738213 198.67610522 197.89482831 197.1135514\n"," 196.33227448 195.55099757 194.76972066 193.98844375 193.20716684\n"," 192.42588993 191.64461301 190.8633361  190.08205919 189.30078228\n"," 188.51950537 187.73822846 186.95695154 186.17567463 185.39439772\n"," 184.61312081 183.8318439  183.05056699 182.26929007 181.48801316\n"," 180.70673625 179.92545934 179.14418243 178.36290552 177.5816286\n"," 176.80035169 176.01907478 175.23779787 174.45652096 173.67524405\n"," 172.89396713 172.11269022 171.33141331 170.5501364  169.76885949\n"," 168.98758258 168.20630566 167.42502875 166.64375184 165.86247493\n"," 165.08119802 164.29992111 163.51864419 162.73736728 161.95609037\n"," 161.17481346 160.39353655 159.61225964 158.83098272 158.04970581\n"," 157.2684289  156.48715199 155.70587508 154.92459817 154.14332125\n"," 153.36204434 152.58076743 151.79949052 151.01821361 150.2369367\n"," 149.45565978 148.67438287 147.89310596 147.11182905 146.33055214\n"," 145.54927523 144.76799831 143.9867214  143.20544449 142.42416758\n"," 141.64289067 140.86161376 140.08033684 139.29905993 138.51778302\n"," 137.73650611 136.9552292  136.17395229 135.39267538 134.61139846\n"," 133.83012155 133.04884464 132.26756773 131.48629082 130.70501391\n"," 129.92373699 129.14246008 128.36118317 127.57990626 126.79862935\n"," 126.01735244 125.23607552 124.45479861 123.6735217  122.89224479\n"," 122.11096788 121.32969097 120.54841405 119.76713714 118.98586023\n"," 118.20458332 117.42330641 116.6420295  115.86075258 115.07947567\n"," 114.29819876]\n","At this threshold, precision is [0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746 0.92957746\n"," 0.92957746 0.92957746], recall is [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1.]\n","Average precision is 0.9295774647887324\n"]}],"source":["print(\"Best F1 score is {}\".format(np.amax(F1)))\n","idx_best_threshold = np.squeeze(np.argwhere(F1 == np.amax(F1)))\n","print(\"Best threshold is {}\".format(threshold_list[idx_best_threshold]))\n","print(\"At this threshold, precision is {}, recall is {}\".format(precision[idx_best_threshold], recall[idx_best_threshold]))\n","average_precision = np.sum(precision[1:] * (recall[1:] - recall[:-1]))\n","print(\"Average precision is {}\".format(average_precision))\n","\n","print(\"\\nAugmented detection:\")\n","print(\"Best F1 score is {}\".format(np.amax(F1_aug)))\n","idx_best_threshold = np.squeeze(np.argwhere(F1_aug == np.amax(F1_aug)))\n","print(\"Best threshold is {}\".format(threshold_list[idx_best_threshold]))\n","print(\"At this threshold, precision is {}, recall is {}\".format(precision_aug[idx_best_threshold], \n","                                                                recall_aug[idx_best_threshold]))\n","\n","average_precision_aug = np.sum(precision_aug[1:] * (recall_aug[1:] - recall_aug[:-1]))\n","print(\"Average precision is {}\".format(average_precision_aug))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lwrAu0kWLe8D","executionInfo":{"status":"ok","timestamp":1667680307087,"user_tz":-540,"elapsed":11,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"977070e7-4017-4692-d9c2-bcad45ab167b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Threshold is 94.5\n","\n","PR evaluation using augmented detection:\n","Precision: 0.9295774647887324\n","Recall: 1.0\n","F1: 0.9635036496350364\n","TP: 198\n","FP: 15\n","FN: 0\n"]}],"source":["# Now select a threshold\n","threshold = 94.5\n","\n","print(\"Threshold is {}\".format(threshold))\n","idx_detection = return_anomaly_idx_by_threshold(test_lstm_recons_error, threshold)\n","idx_detection_augmented = augment_detected_idx(idx_detection, anomaly_index_lstm)\n","precision, recall, F1, n_TP, n_FP, n_FN = compute_precision_and_recall(idx_detection_augmented, \n","                                                                       anomaly_index_lstm, \n","                                                                       test_labels_lstm)\n","print(\"\\nPR evaluation using augmented detection:\")\n","print(\"Precision: {}\".format(precision))\n","print(\"Recall: {}\".format(recall))\n","print(\"F1: {}\".format(F1))\n","print(\"TP: {}\".format(n_TP))\n","print(\"FP: {}\".format(n_FP))\n","print(\"FN: {}\".format(n_FN))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hTdQKo_7Le8D"},"outputs":[],"source":["def slice_detected_indices_into_seq(idx_detection, interval):\n","    detected_seq = []\n","    i = 0\n","    while i < len(idx_detection):\n","        if i == 0:\n","            cur_seq = [idx_detection[i]]\n","            i = i + 1\n","        else:\n","            if idx_detection[i] - idx_detection[i-1] > interval:\n","                detected_seq.append(cur_seq)\n","                cur_seq = [idx_detection[i]]\n","            else:\n","                cur_seq.append(idx_detection[i])\n","                if i == len(idx_detection) - 1:\n","                    detected_seq.append(cur_seq)\n","            i = i + 1\n","    \n","    print(\"Detected {} sequences\".format(len(detected_seq)))\n","    return detected_seq"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9CTp8rfqLe8E"},"outputs":[],"source":["def plot_detected_anomalies(idx_detection, interval, dataset, result, detection_method, augmented_flag=1, y_scale=5, y_lim=None):\n","    detected_seq = slice_detected_indices_into_seq(idx_detection, interval=interval)\n","    t_test = result['t_test']\n","    test = result['test']\n","    idx_anomaly_test = result['idx_anomaly_test']\n","        \n","    # plot detected sequences\n","    fig, axs = plt.subplots(1, 1, figsize=(18, 5), edgecolor='k')\n","    fig.subplots_adjust(hspace=.4, wspace=.4)\n","    axs.plot(t_test, test)\n","    for j in range(len(idx_anomaly_test)):\n","        if j == 0:\n","            axs.plot(idx_anomaly_test[j] * np.ones(20), np.linspace(-y_scale, y_scale, 20), 'r--', label='true anomalies')\n","        else:\n","            axs.plot(idx_anomaly_test[j] * np.ones(20), np.linspace(-y_scale, y_scale, 20), 'r--')\n","        \n","    for i in range(len(detected_seq)):\n","        for j in detected_seq[i]:\n","            if j == detected_seq[0][0]:\n","                axs.plot((j+interval*2) * np.ones(20), np.linspace(-y_scale, -0.8*y_scale, 20), 'g-', label='detected anomalies')\n","            else:\n","                axs.plot((j+interval*2) * np.ones(20), np.linspace(-y_scale, -0.8*y_scale, 20), 'g-')\n","    \n","    for j in range(len(idx_anomaly_test)):\n","        axs.plot(idx_anomaly_test[j] * np.ones(20), np.linspace(-y_scale, y_scale, 20), 'r--')\n","\n","    for i in range(len(detected_seq)):\n","        interval_x = np.asarray([detected_seq[i][0], detected_seq[i][-1]+interval*2])\n","        interval_y = np.asarray([y_scale,y_scale])\n","        if i == 0:\n","            axs.fill_between(interval_x, interval_y, alpha=0.2, color='y', label='detected anomaly windows')\n","        else:\n","            axs.fill_between(interval_x, interval_y, alpha=0.2, color='y')\n","        interval_y = np.asarray([-y_scale,-y_scale])\n","        axs.fill_between(interval_x, interval_y, alpha=0.2, color='y')\n","    axs.grid(True)\n","    axs.set_xlim(0, len(t_test))\n","    if y_lim is None:\n","        axs.set_ylim(-y_scale, y_scale)\n","    else:\n","        axs.set_ylim(-y_scale, y_lim)\n","    axs.set_xlabel(\"timestamp (every {})\".format(result['t_unit']))\n","    axs.set_ylabel(\"normalised readings\")\n","    axs.set_title(\"{} dataset test sequence\\n(normalised by train mean {:.4f} and std {:.4f})\\n Detection method: {}\".format(dataset, \n","                                                                                        result['train_m'], \n","                                                                                        result['train_std'],\n","                                                                                        detection_method))\n","    axs.legend()\n","    savefig(config['result_dir']+'detected_anomalies_{}_aug_{}.pdf'.format(detection_method, augmented_flag))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uiP2wlNdLe8E","executionInfo":{"status":"ok","timestamp":1667680308917,"user_tz":-540,"elapsed":1838,"user":{"displayName":"Eddison KIM","userId":"04832200980885410231"}},"colab":{"base_uri":"https://localhost:8080/","height":352},"outputId":"66868f00-b8a1-43cb-b85c-19c85d78a4a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Detected 1 sequences\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1296x360 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["plot_detected_anomalies(idx_detection_augmented, \n","                        interval=config['l_win']*config['l_seq']/2, \n","                        dataset=dataset, \n","                        result=result, \n","                        detection_method='lstm reconstruction error',\n","                        augmented_flag=1,\n","                        y_scale=5,\n","                        y_lim=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a5293mTPLe8E"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"anomaly-env","language":"python","name":"anomaly-env"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"colab":{"provenance":[],"collapsed_sections":[]},"accelerator":"GPU","gpuClass":"standard"},"nbformat":4,"nbformat_minor":0}